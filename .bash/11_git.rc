
function fzf_branch {
  (git branch | fzf)
}

function fzf_git_ch {
  if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    git checkout `fzf_branch`
  fi
}

function fzf_git_d {
  if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    # master消したらまずいので
    git branch -D $(git branch | grep -v -e '^master$' | grep  -v `git current` | fzf)
  fi
}

function fzf_git_pull_rebase {
  if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    git pull --rebase origin `fzf_branch`
  fi
}

# fshow - git commit browser
fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

alias glNoGraph='git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@"'
_gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
_viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always % | diff-so-fancy'"

# fcoc_preview - checkout git commit with previews
fcoc_preview() {
  local commit
  commit=$( glNoGraph |
    fzf --no-sort --reverse --tiebreak=index --no-multi \
        --ansi --preview="$_viewGitLogLine" ) &&
  git checkout $(echo "$commit" | sed "s/ .*//")
}

# fshow_preview - git commit browser with previews
fshow_preview() {
    glNoGraph |
        fzf --no-sort --reverse --tiebreak=index --no-multi \
            --ansi --preview="$_viewGitLogLine" \
                --header "enter to view, alt-y to copy hash" \
                --bind "enter:execute:$_viewGitLogLine   | less -R" \
                --bind "alt-y:execute:$_gitLogLineToHash | xclip"
}

fzf_git_vim() {
  vim $(git ls-files | fzf)
}

alias ch='fzf_git_ch'
alias gid='fzf_git_d'
alias pullRebase='fzf_git_pull_rebase'
alias fvim='fzf_git_vim'

# change working directory (to root)
cwd() {
  if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    cd `git rev-parse --show-toplevel`
  fi
}
